{"version":3,"file":"test.jssp","sources":["../src/test.ts"],"sourcesContent":["import test from 'ava';\nimport '@k2oss/k2-broker-core/test-framework';\nimport './index';\n\nfunction mock(name: string, value: any) \n{\n    global[name] = value;\n}\n\ntest('describe returns the hardcoded instance', async t => {\n    let schema = null;\n    mock('postSchema', function(result: any) {\n        schema = result;\n    });\n\n    await Promise.resolve<void>(ondescribe());\n    \n    t.deepEqual(schema, {\n        objects: {\n            \"randomstring\": { \n                displayName: \"Random String\", \n                description: \"Utility for generating random strings\", \n                properties: {\n                    \"returnString\": { \n                        displayName: \"Return string\", \n                        type: \"string\" \n                    }\n                },\n                methods: { \n                    \"generateCode\": {\n                        displayName: \"Generate Access Code\", \n                        type: \"execute\", \n                        parameters: { \n                            \"pCharacters\" : { \n                                displayName: \"Length\",\n                                description: \"The number of characters 5-8 in the returned string\",\n                                type: \"number\" } \n                        },\n                        requiredParameters: [ \"pCharacters\" ], \n                        outputs: [ \"returnString\" ] \n                    },\n                }\n            }\n        }\n    });\n\n    t.pass();\n});\n\ntest('execute fails with the wrong parameters', async t => {\n    let error = await t.throwsAsync(Promise.resolve<void>(onexecute('test1', 'unused', {}, {}, {})));\n    \n    t.deepEqual(error.message, 'The object test1 is not supported.');\n\n    error = await t.throwsAsync(Promise.resolve<void>(onexecute('randomString', 'test2', {}, {}, {})));\n    \n    t.deepEqual(error.message, 'The method test2 is not supported.');\n\n    t.pass();\n});\n\ntest('execute passes with method params', async t => {\n    let result: any = null;\n    function pr(r: any) {\n        result = r;\n    }\n\n    mock('postResult', pr);\n\n    await Promise.resolve<void>(onexecute(\n        'randomstring', 'getParams', {\n            \"pid\": 456\n        }, {}, {}));\n\n    t.deepEqual(result, {\n        \"id\": 456\n    });\n\n    t.pass();\n});\n\ntest('execute passes', async t => {\n\n    let xhr: {[key:string]: any} = null;\n    class XHR {\n        public onreadystatechange: () => void;\n        public readyState: number;\n        public status: number;\n        public responseText: string;\n        private recorder: {[key:string]: any};\n\n        constructor() {\n            xhr = this.recorder = {};\n            this.recorder.headers = {};\n        }\n\n        open(method: string, url: string) {\n            this.recorder.opened = {method, url};   \n        }\n\n        setRequestHeader(key: string, value: string) {\n            this.recorder.headers[key] = value;\n        }\n\n        send() {\n            queueMicrotask(() =>\n            {\n                this.readyState = 4;\n                this.status = 200;\n                this.responseText = JSON.stringify({\n                    \"id\": 123,\n                    \"userId\": 51,\n                    \"title\": \"Groceries\",\n                    \"completed\": false\n                });\n                this.onreadystatechange();\n                delete this.responseText;\n            });\n        }\n    }\n\n    mock('XMLHttpRequest', XHR);\n\n    let result: any = null;\n    function pr(r: any) {\n        result = r;\n    }\n\n    mock('postResult', pr);\n\n    await Promise.resolve<void>(onexecute(\n        'todo', 'get', {}, {\n            \"id\": 123\n        }, {}));\n\n    t.deepEqual(xhr, {\n        opened: {\n            method: 'GET',\n            url: 'https://jsonplaceholder.typicode.com/todos/123'\n        },\n        headers: {\n            'test': 'test value'\n        }\n    });\n\n    t.deepEqual(result, {\n        \"id\": 123,\n        \"userId\": 51,\n        \"title\": \"Groceries\",\n        \"completed\": false\n    });\n\n    t.pass();\n});"],"names":["mock","name","value","global","test","async","schema","result","Promise","resolve","ondescribe","t","deepEqual","objects","displayName","description","properties","type","methods","parameters","requiredParameters","outputs","pass","error","throwsAsync","onexecute","message","r","xhr","constructor","this","recorder","headers","open","method","url","opened","setRequestHeader","key","send","queueMicrotask","readyState","status","responseText","JSON","stringify","onreadystatechange"],"mappings":"4KAIA,SAASA,EAAKC,EAAcC,GAExBC,OAAOF,GAAQC,qEAGnBE,EAAK,0CAA2CC,MAAAA,QACxCC,EAAS,KACbN,EAAK,cAAc,SAASO,GACxBD,EAASC,WAGPC,QAAQC,QAAcC,cAE5BC,EAAEC,UAAUN,EAAQ,CAChBO,QAAS,cACW,CACZC,YAAa,gBACbC,YAAa,wCACbC,WAAY,cACQ,CACZF,YAAa,gBACbG,KAAM,WAGdC,QAAS,cACW,CACZJ,YAAa,uBACbG,KAAM,UACNE,WAAY,aACQ,CACZL,YAAa,SACbC,YAAa,sDACbE,KAAM,WAEdG,mBAAoB,CAAE,eACtBC,QAAS,CAAE,sBAO/BV,EAAEW,SAGNlB,EAAK,0CAA2CC,MAAAA,QACxCkB,QAAcZ,EAAEa,YAAYhB,QAAQC,QAAcgB,UAAU,QAAS,SAAU,GAAI,GAAI,MAE3Fd,EAAEC,UAAUW,EAAMG,QAAS,sCAE3BH,QAAcZ,EAAEa,YAAYhB,QAAQC,QAAcgB,UAAU,eAAgB,QAAS,GAAI,GAAI,MAE7Fd,EAAEC,UAAUW,EAAMG,QAAS,sCAE3Bf,EAAEW,SAGNlB,EAAK,oCAAqCC,MAAAA,QAClCE,EAAc,KAKlBP,EAAK,uBAJO2B,GACRpB,EAASoB,WAKPnB,QAAQC,QAAcgB,UACxB,eAAgB,YAAa,KAClB,KACR,GAAI,KAEXd,EAAEC,UAAUL,EAAQ,IACV,MAGVI,EAAEW,SAGNlB,EAAK,iBAAkBC,MAAAA,QAEfuB,EAA2B,KAsC/B5B,EAAK,uBA9BD6B,cACID,EAAME,KAAKC,SAAW,QACjBA,SAASC,QAAU,GAG5BC,KAAKC,EAAgBC,QACZJ,SAASK,OAAS,CAACF,OAAAA,EAAQC,IAAAA,GAGpCE,iBAAiBC,EAAapC,QACrB6B,SAASC,QAAQM,GAAOpC,EAGjCqC,OACIC,eAAe,UAENC,WAAa,OACbC,OAAS,SACTC,aAAeC,KAAKC,UAAU,IACzB,WACI,SACD,uBACI,SAEZC,4BACEhB,KAAKa,sBAOpBpC,EAAc,KAKlBP,EAAK,uBAJO2B,GACRpB,EAASoB,WAKPnB,QAAQC,QAAcgB,UACxB,OAAQ,MAAO,GAAI,IACT,KACP,KAEPd,EAAEC,UAAUgB,EAAK,CACbQ,OAAQ,CACJF,OAAQ,MACRC,IAAK,kDAETH,QAAS,MACG,gBAIhBrB,EAAEC,UAAUL,EAAQ,IACV,WACI,SACD,uBACI,IAGjBI,EAAEW"}