{"version":3,"file":"test.js","sources":["../src/test.ts"],"sourcesContent":["import test from 'ava';\nimport '@k2oss/k2-broker-core/test-framework';\nimport './index';\n\nfunction mock(name: string, value: any) \n{\n    global[name] = value;\n}\n\ntest('describe returns the hardcoded instance', async t => {\n    let schema = null;\n    mock('postSchema', function(result: any) {\n        schema = result;\n    });\n\n    await Promise.resolve<void>(ondescribe());\n    \n    t.deepEqual(schema, {\n        objects: {\n            \"todo\": {\n                displayName: \"TODO\",\n                description: \"Manages a TODO list\",\n                properties: {\n                    \"id\": {\n                        displayName: \"ID\",\n                        type: \"number\"\n                    },\n                    \"userId\": {\n                        displayName: \"User ID\",\n                        type: \"number\"\n                    },\n                    \"title\": {\n                        displayName: \"Title\",\n                        type: \"string\"\n                    },\n                    \"completed\": {\n                        displayName: \"Completed\",\n                        type: \"boolean\"\n                    }\n                },\n                methods: {\n                    \"get\": {\n                        displayName: \"Get TODO\",\n                        type: \"read\",\n                        inputs: [ \"id\" ],\n                        outputs: [ \"id\", \"userId\", \"title\", \"completed\" ]\n                    },\n                    \"getParams\": {\n                        displayName: \"Get TODO\",\n                        type: \"read\",\n                        parameters: {\n                            \"pid\" : { displayName: \"param1\", description: \"Description Of Param 1\", type: \"number\"} \n                        },\n                        requiredParameters: [ \"pid\" ],\n                        outputs: [ \"id\" ]\n                    }\n                }\n            }\n        }\n    });\n\n    t.pass();\n});\n\ntest('execute fails with the wrong parameters', async t => {\n    let error = await t.throwsAsync(Promise.resolve<void>(onexecute('test1', 'unused', {}, {})));\n    \n    t.deepEqual(error.message, 'The object test1 is not supported.');\n\n    error = await t.throwsAsync(Promise.resolve<void>(onexecute('todo', 'test2', {}, {})));\n    \n    t.deepEqual(error.message, 'The method test2 is not supported.');\n\n    t.pass();\n});\n\ntest('execute passes with method params', async t => {\n    let result: any = null;\n    function pr(r: any) {\n        result = r;\n    }\n\n    mock('postResult', pr);\n\n    await Promise.resolve<void>(onexecute(\n        'todo', 'getParams', {\n            \"pid\": 456\n        }, {}, {}));\n\n    t.deepEqual(result, {\n        \"id\": 456\n    });\n\n    t.pass();\n});\n\ntest('execute passes', async t => {\n\n    let xhr: {[key:string]: any} = null;\n    class XHR {\n        public onreadystatechange: () => void;\n        public readyState: number;\n        public status: number;\n        public responseText: string;\n        private recorder: {[key:string]: any};\n\n        constructor() {\n            xhr = this.recorder = {};\n            this.recorder.headers = {};\n        }\n\n        open(method: string, url: string) {\n            this.recorder.opened = {method, url};   \n        }\n\n        setRequestHeader(key: string, value: string) {\n            this.recorder.headers[key] = value;\n        }\n\n        send() {\n            queueMicrotask(() =>\n            {\n                this.readyState = 4;\n                this.status = 200;\n                this.responseText = JSON.stringify({\n                    \"id\": 123,\n                    \"userId\": 51,\n                    \"title\": \"Groceries\",\n                    \"completed\": false\n                });\n                this.onreadystatechange();\n                delete this.responseText;\n            });\n        }\n    }\n\n    mock('XMLHttpRequest', XHR);\n\n    let result: any = null;\n    function pr(r: any) {\n        result = r;\n    }\n\n    mock('postResult', pr);\n\n    await Promise.resolve<void>(onexecute(\n        'todo', 'get', {}, {\n            \"id\": 123\n        }, {}));\n\n    t.deepEqual(xhr, {\n        opened: {\n            method: 'GET',\n            url: 'https://jsonplaceholder.typicode.com/todos/123'\n        },\n        headers: {\n            'test': 'test value'\n        }\n    });\n\n    t.deepEqual(result, {\n        \"id\": 123,\n        \"userId\": 51,\n        \"title\": \"Groceries\",\n        \"completed\": false\n    });\n\n    t.pass();\n});"],"names":["mock","name","value","global","test","async","schema","result","Promise","resolve","ondescribe","t","deepEqual","objects","displayName","description","properties","type","methods","inputs","outputs","parameters","requiredParameters","pass","error","throwsAsync","onexecute","message","r","xhr","constructor","this","recorder","headers","open","method","url","opened","setRequestHeader","key","send","queueMicrotask","readyState","status","responseText","JSON","stringify","onreadystatechange"],"mappings":"4KAIA,SAASA,EAAKC,EAAcC,GAExBC,OAAOF,GAAQC,qEAGnBE,EAAK,0CAA2CC,MAAAA,QACxCC,EAAS,KACbN,EAAK,cAAc,SAASO,GACxBD,EAASC,WAGPC,QAAQC,QAAcC,cAE5BC,EAAEC,UAAUN,EAAQ,CAChBO,QAAS,MACG,CACJC,YAAa,OACbC,YAAa,sBACbC,WAAY,IACF,CACFF,YAAa,KACbG,KAAM,iBAEA,CACNH,YAAa,UACbG,KAAM,gBAED,CACLH,YAAa,QACbG,KAAM,oBAEG,CACTH,YAAa,YACbG,KAAM,YAGdC,QAAS,KACE,CACHJ,YAAa,WACbG,KAAM,OACNE,OAAQ,CAAE,MACVC,QAAS,CAAE,KAAM,SAAU,QAAS,wBAE3B,CACTN,YAAa,WACbG,KAAM,OACNI,WAAY,KACA,CAAEP,YAAa,SAAUC,YAAa,yBAA0BE,KAAM,WAElFK,mBAAoB,CAAE,OACtBF,QAAS,CAAE,YAO/BT,EAAEY,SAGNnB,EAAK,0CAA2CC,MAAAA,QACxCmB,QAAcb,EAAEc,YAAYjB,QAAQC,QAAciB,UAAU,QAAS,SAAU,GAAI,MAEvFf,EAAEC,UAAUY,EAAMG,QAAS,sCAE3BH,QAAcb,EAAEc,YAAYjB,QAAQC,QAAciB,UAAU,OAAQ,QAAS,GAAI,MAEjFf,EAAEC,UAAUY,EAAMG,QAAS,sCAE3BhB,EAAEY,SAGNnB,EAAK,oCAAqCC,MAAAA,QAClCE,EAAc,KAKlBP,EAAK,uBAJO4B,GACRrB,EAASqB,WAKPpB,QAAQC,QAAciB,UACxB,OAAQ,YAAa,KACV,KACR,GAAI,KAEXf,EAAEC,UAAUL,EAAQ,IACV,MAGVI,EAAEY,SAGNnB,EAAK,iBAAkBC,MAAAA,QAEfwB,EAA2B,KAsC/B7B,EAAK,uBA9BD8B,cACID,EAAME,KAAKC,SAAW,QACjBA,SAASC,QAAU,GAG5BC,KAAKC,EAAgBC,QACZJ,SAASK,OAAS,CAACF,OAAAA,EAAQC,IAAAA,GAGpCE,iBAAiBC,EAAarC,QACrB8B,SAASC,QAAQM,GAAOrC,EAGjCsC,OACIC,eAAe,UAENC,WAAa,OACbC,OAAS,SACTC,aAAeC,KAAKC,UAAU,IACzB,WACI,SACD,uBACI,SAEZC,4BACEhB,KAAKa,sBAOpBrC,EAAc,KAKlBP,EAAK,uBAJO4B,GACRrB,EAASqB,WAKPpB,QAAQC,QAAciB,UACxB,OAAQ,MAAO,GAAI,IACT,KACP,KAEPf,EAAEC,UAAUiB,EAAK,CACbQ,OAAQ,CACJF,OAAQ,MACRC,IAAK,kDAETH,QAAS,MACG,gBAIhBtB,EAAEC,UAAUL,EAAQ,IACV,WACI,SACD,uBACI,IAGjBI,EAAEY"}